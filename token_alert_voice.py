#!/usr/bin/env python3
"""
Script pour cr√©er un message vocal d'alerte de consommation de tokens Claude Code
Utilise la synth√®se vocale int√©gr√©e de macOS (say command)
"""

import subprocess
import sys
from datetime import datetime

def create_voice_alert(message_type="warning", custom_message=None):
    """
    Cr√©e et joue un message vocal d'alerte
    
    Args:
        message_type (str): Type d'alerte ('warning', 'critical', 'info')
        custom_message (str): Message personnalis√© optionnel
    """
    
    # Messages pr√©d√©finis
    messages = {
        "warning": "Attention ! Vos tokens Claude Code sont bient√¥t √©puis√©s. Il vous reste moins de 20 pour cent de votre allocation.",
        "critical": "Alerte critique ! Consommation de vos tokens Claude Code termin√©e. Votre bloc de facturation est √©puis√©.",
        "info": "Information : Votre consommation de tokens Claude Code est actuellement √† 50 pour cent.",
        "custom": custom_message or "Message d'alerte tokens Claude Code."
    }
    
    # S√©lection du message
    message = messages.get(message_type, messages["warning"])
    
    # Configuration de la voix (fran√ßaise)
    voice_options = [
        "-v", "Am√©lie",  # Voix fran√ßaise f√©minine
        "-r", "180"      # Vitesse de parole (mots par minute)
    ]
    
    try:
        # Affichage du message
        print(f"üîä Message vocal: {message}")
        print(f"‚è∞ Heure: {datetime.now().strftime('%H:%M:%S')}")
        
        # Commande say pour macOS
        cmd = ["say"] + voice_options + [message]
        
        # Ex√©cution de la commande
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Message vocal jou√© avec succ√®s")
        else:
            print(f"‚ùå Erreur lors de la lecture: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è Timeout: Message vocal trop long")
    except FileNotFoundError:
        print("‚ùå Commande 'say' non trouv√©e. Ce script n√©cessite macOS.")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")

def check_token_usage_and_alert():
    """
    V√©rifie l'utilisation des tokens via ccusage et d√©clenche une alerte si n√©cessaire
    """
    try:
        # Ex√©cution de ccusage blocks pour obtenir les donn√©es actuelles
        result = subprocess.run(
            ["npx", "ccusage@latest", "blocks", "--json"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            import json
            data = json.loads(result.stdout)
            
            # Recherche du bloc actif
            for block in data.get("blocks", []):
                if block.get("status") == "active":
                    percentage = block.get("percentage", 0)
                    
                    if percentage >= 95:
                        create_voice_alert("critical")
                    elif percentage >= 80:
                        create_voice_alert("warning")
                    else:
                        print(f"‚ÑπÔ∏è Utilisation actuelle: {percentage}% - Pas d'alerte n√©cessaire")
                    break
            else:
                print("‚ÑπÔ∏è Aucun bloc actif trouv√©")
                
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è Timeout lors de la v√©rification ccusage")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        alert_type = sys.argv[1]
        custom_msg = sys.argv[2] if len(sys.argv) > 2 else None
        create_voice_alert(alert_type, custom_msg)
    else:
        # Mode automatique: v√©rification et alerte conditionnelle
        check_token_usage_and_alert()